ACL = LISTA DE CONTROLE DE ACESSO
OBS: A TABELA QUE IRÁ LIGAR ROLES E ABILITIES DEVE TER O NOME TUDO EM MINÚSCULO NO SINGULAR E NA ORDEM ALFABÉTICA 

EX:
roles
abilities
ability_role //TABELA DE LIGAÇÃO ENTRE roles e abilities
role_user //TABELA DE LIGAÇÃO ENTRE roles e user

OBS: SÓ É PRECISO CRIAR MODELS PARA AS TABELAS ROLES E ABILITIES
OBS: EM RELAÇÕES MUITOS PARA MUITOS REQUER UMA TABELA DE LIGAÇÃO E NOME DEVE SER EM ORDEM ALFABÉTICA MINÚSCULO NO SINGULAR

ROLES
- ADMIN
- GUEST

ABILITY
- DELETE
- EDITE
- UPDATE


====SEEDER E FACTORY======
USADOS PARA INSERIR DADOS NO BANCO, AO RODAR O COMANDO php artisan db:seed O ARQUIVO DataBaseSeeder É EXECUTADO MAS É NECESSÁRIO TER UMA FACTORY, QUE É USADA PARA INCLUIR MAIS DE UM REGISTRO


==========RELACIONAMENTOS DE TABELAS====================
EXISTE CAMINHOS IDA E VOLTA

IDA = hasOne()
VOLTA = belongTo()

ONDE ESTIVER UMA COLUNA COM CHAVE ESTRANGEIRA SIGNIFICA QUE ESSES DADOS PERTENCE AO DONO DO ID CORRESPONDENTE

**MÉTODOS***

## RELAÇÃO 1 PARA 1 ##
--HAS--
hasOne() ex: usuário tem 1 endereço

--BELONGS--
belongsTo() ex: o endereço pertence a 1 usuário

## RELAÇÃO 1 PARA MUITOS ##
--HAS--
hasMany() ex: 1 usuário tem vários postes

--BELONGS--
belongsTo() ex: e cada poste pertence a 1 usuário 

## RELAÇÃO MUITOS PARA MUITOS ##
PRECISA DE UMA TABELA PIVOT

--BELONGS--
belongsTo() método belongs to na duas pontas 
            ex: uma regra pode ter várias habilidades e uma habilidade pode ter varias regras
